#!/bin/bash

# Resonance‚Ñ¢ for Claude Code - Auto Start Script
# Opens two terminal windows with Opus and Sonnet sessions

# Load language configuration
CONFIG_FILE="$HOME/.claude/resonance-config.json"
LANGUAGE="en"

if [[ -f "$CONFIG_FILE" ]]; then
    # Extract language from JSON config
    LANGUAGE=$(grep '"language"' "$CONFIG_FILE" 2>/dev/null | cut -d'"' -f4)
    if [[ -z "$LANGUAGE" ]]; then
        LANGUAGE="en"
    fi
fi

# Language-specific messages
if [[ "$LANGUAGE" == "ko" ]]; then
    MSG_STARTING="ÏÑ∏ÏÖò ÏãúÏûë Ï§ë"
    MSG_CLAUDE_NOT_FOUND="‚ùå Ïò§Î•ò: 'claude' Î™ÖÎ†πÏñ¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!"
    MSG_CLAUDE_INSTALL="   Claude CodeÎ•º ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî"
    MSG_CLAUDE_FOUND="‚úì Claude Code ÏúÑÏπò"
    MSG_OPENING_OPUS="üöÄ Opus ÏÑ∏ÏÖò Ïó¥Í∏∞ (Í≥ÑÌöç Î∞è Î¶¨Î∑∞)..."
    MSG_OPENING_SONNET="üöÄ Sonnet ÏÑ∏ÏÖò Ïó¥Í∏∞ (Íµ¨ÌòÑ)..."
    MSG_VSCODE_DETECTED="üìù VSCode Í∏∞Î∞ò Ìé∏ÏßëÍ∏∞ Í∞êÏßÄ..."
    MSG_CREATING_TERMINAL="   üöÄ ÏÉà ÌÑ∞ÎØ∏ÎÑê ÌÉ≠ ÏÉùÏÑ± Ï§ë"
    MSG_TERMINAL_SUCCESS="   ‚úì ÌÑ∞ÎØ∏ÎÑê ÏÉùÏÑ± ÏÑ±Í≥µ"
    MSG_TERMINAL_READY="   üí° ÌÑ∞ÎØ∏ÎÑê ÌÉ≠ Ï§ÄÎπÑ ÏôÑÎ£å"
    MSG_RUNNING_MODEL="   üìù Ïã§Ìñâ Ï§ëÏù∏ Claude Î™®Îç∏"
    MSG_AUTO_FAIL="   ‚ö†Ô∏è  ÏûêÎèô ÏÉùÏÑ± Ïã§Ìå®, ÏàòÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî"
    MSG_COMMAND="   Î™ÖÎ†πÏñ¥"
    MSG_ALL_SUCCESS="‚úÖ Î™®Îì† Claude Code ÏÑ∏ÏÖòÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïó¥Î†∏ÏäµÎãàÎã§!"
    MSG_PARTIAL_SUCCESS="‚ö†Ô∏è  Î∂ÄÎ∂Ñ ÏÑ±Í≥µ: $SUCCESS_COUNT/$TOTAL_TERMINALS ÌÑ∞ÎØ∏ÎÑê Ïó¥Î¶º"
    MSG_TROUBLESHOOTING="üí° Î¨∏Ï†ú Ìï¥Í≤∞ ÌåÅ:"
    MSG_CHECK_TERMINALS="   ‚Ä¢ VSCodeÏóê Î™®Îì† ÌÑ∞ÎØ∏ÎÑêÏù¥ ÌëúÏãúÎêòÎäîÏßÄ ÌôïÏù∏"
    MSG_CHECK_ERRORS="   ‚Ä¢ ÌÑ∞ÎØ∏ÎÑêÏóê Ïò§Î•ò Î©îÏãúÏßÄÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏"
    MSG_TRY_MANUAL="   ‚Ä¢ ÌïÑÏöîÌïú Í≤ΩÏö∞ Î™ÖÎ†πÏñ¥Î•º ÏàòÎèôÏúºÎ°ú Ïã§Ìñâ"
    MSG_FAILED="‚ùå ÌÑ∞ÎØ∏ÎÑê ÏûêÎèô Ïó¥Í∏∞ Ïã§Ìå®"
    MSG_MANUAL_SETUP="üìã ÏàòÎèô ÏÑ§Ï†ï ÌïÑÏöî:"
    MSG_WORKFLOW="üìå Resonance‚Ñ¢ ÏõåÌÅ¨ÌîåÎ°úÏö∞:"
    MSG_VSCODE_TIPS="üí° VSCode ÌåÅ:"
    MSG_SWITCH_TERMINALS="   ‚Ä¢ ÌÑ∞ÎØ∏ÎÑê Ï†ÑÌôò: Cmd+Option+‚Üê / ‚Üí"
    MSG_SPLIT_TERMINAL="   ‚Ä¢ ÌÑ∞ÎØ∏ÎÑê Î∂ÑÌï†: Cmd+\\"
    MSG_TERMINAL_DROPDOWN="   ‚Ä¢ ÌÑ∞ÎØ∏ÎÑê ÎìúÎ°≠Îã§Ïö¥: Ìå®ÎÑêÏóêÏÑú ÌÑ∞ÎØ∏ÎÑê Ïù¥Î¶Ñ ÌÅ¥Î¶≠"
    MSG_HAPPY_CODING="Ï¶êÍ±∞Ïö¥ ÏΩîÎî©ÌïòÏÑ∏Ïöî! Resonance‚Ñ¢ÏôÄ Ìï®Íªò! üéâ"
else
    MSG_STARTING="Starting Sessions"
    MSG_CLAUDE_NOT_FOUND="‚ùå Error: 'claude' command not found!"
    MSG_CLAUDE_INSTALL="   Please make sure Claude Code is installed"
    MSG_CLAUDE_FOUND="‚úì Found Claude Code at"
    MSG_OPENING_OPUS="üöÄ Opening Opus session (Planning & Review)..."
    MSG_OPENING_SONNET="üöÄ Opening Sonnet session (Implementation)..."
    MSG_VSCODE_DETECTED="üìù VSCode-based editor detected..."
    MSG_CREATING_TERMINAL="   üöÄ Creating new terminal tab for"
    MSG_TERMINAL_SUCCESS="   ‚úì Terminal created successfully"
    MSG_TERMINAL_READY="   üí° Terminal tab is ready"
    MSG_RUNNING_MODEL="   üìù Running Claude with model"
    MSG_AUTO_FAIL="   ‚ö†Ô∏è  Auto-creation failed, please create manually"
    MSG_COMMAND="   Command"
    MSG_ALL_SUCCESS="‚úÖ All Claude Code sessions opened successfully!"
    MSG_PARTIAL_SUCCESS="‚ö†Ô∏è  Partially successful: $SUCCESS_COUNT/$TOTAL_TERMINALS terminals opened"
    MSG_TROUBLESHOOTING="üí° Troubleshooting tips:"
    MSG_CHECK_TERMINALS="   ‚Ä¢ Check if all terminals are visible in VSCode"
    MSG_CHECK_ERRORS="   ‚Ä¢ Look for any error messages in the terminals"
    MSG_TRY_MANUAL="   ‚Ä¢ Try running the commands manually if needed"
    MSG_FAILED="‚ùå Failed to open terminals automatically"
    MSG_MANUAL_SETUP="üìã Manual setup required:"
    MSG_WORKFLOW="üìå Resonance‚Ñ¢ Workflow:"
    MSG_VSCODE_TIPS="üí° VSCode Tips:"
    MSG_SWITCH_TERMINALS="   ‚Ä¢ Switch terminals: Cmd+Option+‚Üê / ‚Üí"
    MSG_SPLIT_TERMINAL="   ‚Ä¢ Split terminal: Cmd+\\"
    MSG_TERMINAL_DROPDOWN="   ‚Ä¢ Terminal dropdown: Click terminal name in panel"
    MSG_HAPPY_CODING="Happy coding with Resonance‚Ñ¢! üéâ"
fi

echo ""
echo "    ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ"
echo "    ‚îÇ                                                                 ‚îÇ"
echo "    ‚îÇ   ‚ïî‚ïê‚ïó  ‚ïî‚ïê‚ïó  ‚ïî‚ïê‚ïó  ‚ïî‚ïê‚ïó  ‚ïî‚ïó‚ïî  ‚ïî‚ïê‚ïó  ‚ïî‚ïó‚ïî  ‚ïî‚ïê‚ïó  ‚ïî‚ïê‚ïó                 ‚îÇ"
echo "    ‚îÇ   ‚ï†‚ï¶‚ïù  ‚ïë‚ï£   ‚ïö‚ïê‚ïó  ‚ïë ‚ïë  ‚ïë‚ïë‚ïë  ‚ï†‚ïê‚ï£  ‚ïë‚ïë‚ïë  ‚ïë    ‚ïë‚ï£                  ‚îÇ"
echo "    ‚îÇ   ‚ï©‚ïö‚ïê  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïù‚ïö‚ïù  ‚ï© ‚ï©  ‚ïù‚ïö‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚Ñ¢              ‚îÇ"
echo "    ‚îÇ                                                                 ‚îÇ"
echo "    ‚îÇ                      ‚ú® $MSG_STARTING ‚ú®                    ‚îÇ"
echo "    ‚îÇ                                                                 ‚îÇ"
echo "    ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
echo ""

# Find claude command dynamically
find_claude() {
    local claude_path=""
    
    # Try to find claude in PATH first
    if command -v claude &> /dev/null; then
        # Get the actual path (resolve aliases/functions)
        claude_path=$(which claude 2>/dev/null)
        
        # If it's an alias, extract the real path
        if [[ "$claude_path" == *"aliased to"* ]]; then
            claude_path=$(alias claude 2>/dev/null | sed -E "s/.*aliased to '?([^']+)'?.*/\1/")
        fi
        
        # If it's a symlink, get the real path
        if [[ -L "$claude_path" ]]; then
            claude_path=$(readlink -f "$claude_path" 2>/dev/null || readlink "$claude_path")
        fi
    fi
    
    # If still not found, search in common directories
    if [[ -z "$claude_path" ]] || [[ ! -x "$claude_path" ]]; then
        local search_paths=(
            "$HOME/.claude/local"
            "$HOME/.local/bin"
            "$HOME/bin"
            "/usr/local/bin"
            "/opt/homebrew/bin"
            "/usr/bin"
            "/bin"
            "$HOME/.npm/bin"
            "$HOME/.yarn/bin"
        )
        
        for dir in "${search_paths[@]}"; do
            if [[ -x "$dir/claude" ]]; then
                claude_path="$dir/claude"
                break
            fi
        done
    fi
    
    echo "$claude_path"
}

CLAUDE_CMD=$(find_claude)

# If not found, show error
if [[ -z "$CLAUDE_CMD" ]] || [[ ! -x "$CLAUDE_CMD" ]]; then
    echo "$MSG_CLAUDE_NOT_FOUND"
    echo "$MSG_CLAUDE_INSTALL"
    echo ""
    if [[ "$LANGUAGE" == "ko" ]]; then
        echo "   ÏùºÎ∞òÏ†ÅÏù∏ ÏÑ§Ïπò Î∞©Î≤ï:"
        echo "   ‚Ä¢ Îã§Ïö¥Î°úÎìú: https://claude.ai/download"
        echo "   ‚Ä¢ Homebrew: brew install claude"
        echo "   ‚Ä¢ npm: npm install -g @anthropic/claude-cli"
        echo ""
        echo "   claudeÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄÎßå Ï∞æÏùÑ Ïàò ÏóÜÎã§Î©¥ PATHÏóê Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî"
    else
        echo "   Common installation methods:"
        echo "   ‚Ä¢ Download from: https://claude.ai/download"
        echo "   ‚Ä¢ Homebrew: brew install claude"
        echo "   ‚Ä¢ npm: npm install -g @anthropic/claude-cli"
        echo ""
        echo "   If claude is installed but not found, add it to your PATH"
    fi
    exit 1
fi

echo "$MSG_CLAUDE_FOUND: $CLAUDE_CMD"

# Track success/failure
SUCCESS_COUNT=0
TOTAL_TERMINALS=2

# Function to open new terminal window based on terminal app
open_terminal() {
    local title=$1
    local command=$2
    
    # Check which terminal app is running
    if [[ "$TERM_PROGRAM" == "Apple_Terminal" ]] || [[ -z "$TERM_PROGRAM" ]]; then
        # Use Terminal.app
        osascript <<EOF 2>/dev/null
tell application "Terminal"
    do script "$command"
    set current settings of front window to settings set "Pro"
    set custom title of front window to "$title"
end tell
EOF
        if [[ $? -eq 0 ]]; then
            echo "   ‚úì Terminal window opened"
            ((SUCCESS_COUNT++))
        else
            echo "   ‚ö†Ô∏è  Failed to open Terminal window"
        fi
    elif [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
        # Use iTerm2
        osascript <<EOF 2>/dev/null
tell application "iTerm"
    create window with default profile
    tell current session of current window
        write text "$command"
        set name to "$title"
    end tell
end tell
EOF
        if [[ $? -eq 0 ]]; then
            echo "   ‚úì iTerm window opened"
            ((SUCCESS_COUNT++))
        else
            echo "   ‚ö†Ô∏è  Failed to open iTerm window"
        fi
    elif [[ "$TERM_PROGRAM" == "vscode" ]]; then
        # VSCode/Cursor/Windsurf terminal
        echo "$MSG_VSCODE_DETECTED"
        
        # Find the code command for VSCode variants
        local code_cmd=""
        if command -v code &> /dev/null; then
            code_cmd="code"
        elif [[ -x "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" ]]; then
            code_cmd="/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code"
        elif [[ -x "/Applications/Cursor.app/Contents/Resources/app/bin/code" ]]; then
            code_cmd="/Applications/Cursor.app/Contents/Resources/app/bin/code"
        elif [[ -x "/Applications/Windsurf.app/Contents/Resources/app/bin/code" ]]; then
            code_cmd="/Applications/Windsurf.app/Contents/Resources/app/bin/code"
        fi
        
        if [[ -n "$code_cmd" ]]; then
            # Create new terminal tab and send command
            echo "$MSG_CREATING_TERMINAL: $title"
            
            # Create terminal, rename it, and send command
            # Note: rename requires the terminal to be active
            "$code_cmd" --command "workbench.action.terminal.new" \
                       --command "workbench.action.terminal.rename" \
                       --args "{\"title\":\"$title\"}" \
                       --command "workbench.action.terminal.sendSequence" \
                       --args "{\"text\":\"$command\\u000D\"}" 2>/dev/null
            
            if [[ $? -eq 0 ]]; then
                echo "$MSG_TERMINAL_SUCCESS"
                
                # Terminal created successfully - count as success
                # (Process check is unreliable in VSCode terminal)
                ((SUCCESS_COUNT++))
                echo "$MSG_TERMINAL_READY: '$title'"
                # Extract just the model name
                local model_name=$(echo "$command" | sed -n 's/.*--model \([^ ]*\).*/\1/p')
                echo "$MSG_RUNNING_MODEL: $model_name"
            else
                echo "$MSG_AUTO_FAIL"
                echo "$MSG_COMMAND: $command"
            fi
        else
            # Fallback to manual instructions
            echo "   ‚ö° Quick start for VSCode:"
            echo "   1. Split terminal: Cmd+\\ or click '+' icon"
            echo "   2. Run: $command"
            echo "   3. Rename tab to: $title (right-click ‚Üí Rename)"
        fi
    else
        # Fallback: just echo instructions
        echo "Please open a new terminal and run: $command"
    fi
}

echo "$MSG_OPENING_OPUS"
open_terminal "Resonance - Opus" "$CLAUDE_CMD --model opus"

# Small delay to avoid window overlap
sleep 1

echo "$MSG_OPENING_SONNET"
open_terminal "Resonance - Sonnet" "$CLAUDE_CMD --model sonnet"

echo ""

# Show final status
if [[ $SUCCESS_COUNT -eq $TOTAL_TERMINALS ]]; then
    echo "$MSG_ALL_SUCCESS"
elif [[ $SUCCESS_COUNT -gt 0 ]]; then
    if [[ "$LANGUAGE" == "ko" ]]; then
        echo "‚ö†Ô∏è  Î∂ÄÎ∂Ñ ÏÑ±Í≥µ: $SUCCESS_COUNT/$TOTAL_TERMINALS ÌÑ∞ÎØ∏ÎÑê Ïó¥Î¶º"
    else
        echo "‚ö†Ô∏è  Partially successful: $SUCCESS_COUNT/$TOTAL_TERMINALS terminals opened"
    fi
    echo ""
    echo "$MSG_TROUBLESHOOTING"
    echo "$MSG_CHECK_TERMINALS"
    echo "$MSG_CHECK_ERRORS"
    echo "$MSG_TRY_MANUAL"
else
    echo "$MSG_FAILED"
    echo ""
    echo "$MSG_MANUAL_SETUP"
    if [[ "$LANGUAGE" == "ko" ]]; then
        echo "   1. VSCodeÏóêÏÑú ÏÉà ÌÑ∞ÎØ∏ÎÑê 2Í∞ú ÏÉùÏÑ± (Cmd+Shift+P ‚Üí 'Terminal: Create New Terminal')"
        echo "   2. Ï≤´ Î≤àÏß∏ ÌÑ∞ÎØ∏ÎÑê:  $CLAUDE_CMD --model opus"
        echo "   3. Îëê Î≤àÏß∏ ÌÑ∞ÎØ∏ÎÑê: $CLAUDE_CMD --model sonnet"
    else
        echo "   1. Create two new terminals in VSCode (Cmd+Shift+P ‚Üí 'Terminal: Create New Terminal')"
        echo "   2. In first terminal:  $CLAUDE_CMD --model opus"
        echo "   3. In second terminal: $CLAUDE_CMD --model sonnet"
    fi
fi

echo ""
echo "$MSG_WORKFLOW"
if [[ "$LANGUAGE" == "ko" ]]; then
    echo "   1. Opus ÌÑ∞ÎØ∏ÎÑêÏóêÏÑú:    /cycle-plan"
    echo "   2. Sonnet ÌÑ∞ÎØ∏ÎÑêÏóêÏÑú:  /cycle-start"
    echo "   3. Sonnet ÌÑ∞ÎØ∏ÎÑêÏóêÏÑú:  /cycle-log"
    echo "   4. Opus ÌÑ∞ÎØ∏ÎÑêÏóêÏÑú:    /cycle-check"
else
    echo "   1. In Opus terminal:    /cycle-plan"
    echo "   2. In Sonnet terminal:  /cycle-start"
    echo "   3. In Sonnet terminal:  /cycle-log"
    echo "   4. In Opus terminal:    /cycle-check"
fi
echo ""

# Show terminal status if in VSCode
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
    echo "$MSG_VSCODE_TIPS"
    echo "$MSG_SWITCH_TERMINALS"
    echo "$MSG_SPLIT_TERMINAL"
    echo "$MSG_TERMINAL_DROPDOWN"
    echo ""
fi

echo "$MSG_HAPPY_CODING"