#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const os = require("os");
const readline = require("readline");

const CLAUDE_COMMANDS_DIR = path.join(os.homedir(), ".claude", "commands");
const BACKUP_DIR = path.join(CLAUDE_COMMANDS_DIR, "backup");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Show banner with ASCII art
console.log("");
console.log(
  "    +----------------------------------------------------------------+"
);
console.log(
  "    |                                                                |"
);
console.log(
  "    |    ____  _____ ____   ___  _   _    _    _   _  ____ _____     |"
);
console.log(
  "    |   |  _ \\| ____/ ___| / _ \\| \\ | |  / \\  | \\ | |/ ___| ____|    |"
);
console.log(
  "    |   | |_) |  _| \\___ \\| | | |  \\| | / _ \\ |  \\| | |   |  _|      |"
);
console.log(
  "    |   |  _ <| |___ ___) | |_| | |\\  |/ ___ \\| |\\  | |___| |___     |"
);
console.log(
  "    |   |_| \\_\\_____|____/ \\___/|_| \\_/_/   \\_\\_| \\_|\\____|_____|    |"
);
console.log(
  "    |                                                                |"
);
console.log(
  "    |                      for Claude Code                           |"
);
console.log(
  "    |                                                                |"
);
console.log(
  "    |              AI TDD workflow with Opus-Sonnet-You              |"
);
console.log(
  "    |                                                                |"
);
console.log(
  "    +----------------------------------------------------------------+"
);
console.log("");

// Language selection
function selectLanguage() {
  return new Promise((resolve) => {
    console.log("Select your language / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:\n");
    console.log("  1) English");
    console.log("  2) ÌïúÍµ≠Ïñ¥ (Korean)\n");

    rl.question("Enter your choice (1 or 2): ", (answer) => {
      const choice = answer.trim();
      if (choice === "1") {
        resolve("en");
      } else if (choice === "2") {
        resolve("ko");
      } else {
        console.log("\n‚ùå Invalid choice. Please enter 1 or 2.\n");
        selectLanguage().then(resolve);
      }
    });
  });
}

// Version checking and migration logic
function isLegacyVersion() {
  const CONFIG_FILE = path.join(os.homedir(), ".claude", "resonance-config.json");
  const COMMANDS_DIR = path.join(os.homedir(), ".claude", "commands");
  
  try {
    // Check if commands directory exists
    if (!fs.existsSync(COMMANDS_DIR)) return false;
    
    // Check for worktree artifacts in command files
    const commandFiles = fs.readdirSync(COMMANDS_DIR).filter(file => file.endsWith('.md'));
    for (const file of commandFiles) {
      const filePath = path.join(COMMANDS_DIR, file);
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        // Look for git worktree specific patterns
        if (/(git worktree|\.git\/worktrees|worktree.*checkout|branch.*worktree)/i.test(content)) {
          return true;
        }
      } catch (err) {
        // Skip files that can't be read
        continue;
      }
    }
    
    // Check config version if exists
    if (fs.existsSync(CONFIG_FILE)) {
      try {
        const config = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));
        // If version is less than 1.2.0, it's legacy
        if (config.version && config.version.startsWith('1.0') || config.version.startsWith('1.1')) {
          return true;
        }
      } catch (err) {
        // If config is corrupted, assume legacy
        return true;
      }
    }
    
    return false;
  } catch (err) {
    return false;
  }
}

function performMigration(language) {
  const COMMANDS_DIR = path.join(os.homedir(), ".claude", "commands");
  const timestamp = new Date().toISOString().replace(/[:.]/g, "-").split("T")[0];
  const migrationBackupDir = path.join(COMMANDS_DIR, "backup", `migration-v1.2-${timestamp}`);
  
  console.log(
    language === "ko" 
      ? "\nüîÑ Î†àÍ±∞Ïãú Î≤ÑÏ†ÑÏóêÏÑú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï§ë..."
      : "\nüîÑ Migrating from legacy version..."
  );
  
  // Create migration backup directory
  fs.mkdirSync(migrationBackupDir, { recursive: true });
  
  // Move legacy command files to migration backup
  const commandFiles = fs.readdirSync(COMMANDS_DIR).filter(file => file.endsWith('.md'));
  let migratedCount = 0;
  
  for (const file of commandFiles) {
    const filePath = path.join(COMMANDS_DIR, file);
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      if (/(git worktree|\.git\/worktrees|worktree.*checkout|branch.*worktree)/i.test(content)) {
        // Move legacy file to backup
        fs.renameSync(filePath, path.join(migrationBackupDir, file));
        migratedCount++;
        console.log(`  üì¶ ${file} ‚Üí migration backup`);
      }
    } catch (err) {
      // Skip files that can't be processed
      continue;
    }
  }
  
  console.log(
    language === "ko"
      ? `\n‚úÖ ${migratedCount}Í∞ú Î†àÍ±∞Ïãú ÌååÏùºÏùÑ Î∞±ÏóÖÌñàÏäµÎãàÎã§: ${migrationBackupDir}`
      : `\n‚úÖ Backed up ${migratedCount} legacy files to: ${migrationBackupDir}`
  );
}

async function install() {
  const language = await selectLanguage();
  const SOURCE_DIR = path.join(__dirname, "..", `commands(${language})`);
  const CONFIG_FILE = path.join(
    os.homedir(),
    ".claude",
    "resonance-config.json"
  );

  console.log(
    "\n" +
      (language === "ko"
        ? "ÏÑ§ÏπòÎ•º ÏãúÏûëÌï©ÎãàÎã§..."
        : "Starting installation...") +
      "\n"
  );

  // Check for legacy version and perform migration if needed
  if (isLegacyVersion()) {
    console.log(
      language === "ko"
        ? "\n‚ö†Ô∏è  Î†àÍ±∞Ïãú Î≤ÑÏ†ÑÏù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§!"
        : "\n‚ö†Ô∏è  Legacy version detected!"
    );
    console.log(
      language === "ko"
        ? "   git worktree Í∏∞Î∞òÏóêÏÑú Í∞ÑÎã®Ìïú Ìè¥Îçî Íµ¨Ï°∞Î°ú ÏóÖÍ∑∏Î†àÏù¥ÎìúÌï©ÎãàÎã§."
        : "   Upgrading from git worktree-based to simple folder structure."
    );
    
    performMigration(language);
  }

  // Claude CodeÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  if (!fs.existsSync(path.join(os.homedir(), ".claude"))) {
    if (language === "ko") {
      console.error("‚ùå Claude CodeÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§!");
      console.error(
        "   Claude CodeÎ•º Î®ºÏ†Ä ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî: https://claude.ai/code"
      );
    } else {
      console.error("‚ùå Claude Code is not installed!");
      console.error(
        "   Please install Claude Code first: https://claude.ai/code"
      );
    }
    rl.close();
    process.exit(1);
  }

  // commands Ìè¥Îçî ÏÉùÏÑ± (ÏóÜÎã§Î©¥)
  if (!fs.existsSync(CLAUDE_COMMANDS_DIR)) {
    console.log(
      language === "ko"
        ? "üìÅ .claude/commands Ìè¥Îçî ÏÉùÏÑ± Ï§ë..."
        : "üìÅ Creating .claude/commands directory..."
    );
    fs.mkdirSync(CLAUDE_COMMANDS_DIR, { recursive: true });
  }

  // Î∞±ÏóÖ Ìè¥Îçî ÏÉùÏÑ±
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }

  // Í∏∞Ï°¥ Resonance ÌååÏùºÎì§ Î∞±ÏóÖ
  console.log(
    language === "ko"
      ? "üíæ Í∏∞Ï°¥ ÌååÏùº Î∞±ÏóÖ Ï§ë..."
      : "üíæ Backing up existing files..."
  );
  const resonanceFiles = [
    "cycle-plan-[Opus].md",
    "cycle-start-[Sonnet].md",
    "cycle-check-[Opus].md",
    "cycle-log-[Sonnet].md",
  ];

  const timestamp = new Date()
    .toISOString()
    .replace(/[:.]/g, "-")
    .split("T")[0];
  resonanceFiles.forEach((file) => {
    const sourcePath = path.join(CLAUDE_COMMANDS_DIR, file);
    if (fs.existsSync(sourcePath)) {
      const backupPath = path.join(BACKUP_DIR, `${file}.backup.${timestamp}`);
      fs.copyFileSync(sourcePath, backupPath);
      console.log(`  ‚úÖ ${file} ‚Üí backup/`);
    }
  });

  // Resonance commands Î≥µÏÇ¨
  console.log(
    language === "ko"
      ? "\nüìã Resonance commands ÏÑ§Ïπò Ï§ë..."
      : "\nüìã Installing Resonance commands..."
  );
  const commandFiles = fs
    .readdirSync(SOURCE_DIR)
    .filter((file) => file.endsWith(".md"));

  commandFiles.forEach((file) => {
    const sourcePath = path.join(SOURCE_DIR, file);
    const destPath = path.join(CLAUDE_COMMANDS_DIR, file);

    fs.copyFileSync(sourcePath, destPath);
    console.log(
      `  ‚úÖ ${file} ${language === "ko" ? "ÏÑ§Ïπò ÏôÑÎ£å" : "installed"}`
    );
  });

  // Save language configuration with version update
  console.log(
    language === "ko"
      ? "\n‚öôÔ∏è  Ïñ∏Ïñ¥ ÏÑ§Ï†ï Ï†ÄÏû• Ï§ë..."
      : "\n‚öôÔ∏è  Saving language configuration..."
  );
  
  // Read existing config to preserve migration history
  let existingConfig = {};
  if (fs.existsSync(CONFIG_FILE)) {
    try {
      existingConfig = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));
    } catch (err) {
      // If config is corrupted, start fresh
      existingConfig = {};
    }
  }
  
  const wasLegacy = isLegacyVersion();
  const config = {
    language: language,
    installedAt: new Date().toISOString(),
    version: "1.5.0", // Updated to current version
    ...(wasLegacy && {
      migration: {
        from: existingConfig.version || "1.1.x",
        timestamp: new Date().toISOString(),
        type: "worktree-to-simple"
      }
    })
  };
  fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));

  console.log(
    language === "ko"
      ? "\nüéâ Resonance‚Ñ¢ ÏÑ§Ïπò ÏôÑÎ£å!\n"
      : "\nüéâ Resonance‚Ñ¢ installation complete!\n"
  );

  // Show success banner
  console.log(
    "+===============================================================+"
  );
  console.log(
    "|                                                                 |"
  );
  if (language === "ko") {
    console.log(
      "|                    üí° ÏÇ¨Ïö©Î≤ï                                    |"
    );
    console.log(
      "|                                                               |"
    );
    console.log(
      "|  Claude CodeÏóêÏÑú:                                              |"
    );
    console.log(
      "|                                                               |"
    );
    console.log(
      "|  opus> /cycle-plan      (ÏûëÏóÖ Í≥ÑÌöç ÏàòÎ¶Ω)                          |"
    );
    console.log(
      "|  sonnet> /cycle-start   (ÌÖåÏä§Ìä∏ Í∏∞Î∞ò Íµ¨ÌòÑ)                        |"
    );
    console.log(
      "|  sonnet> /cycle-log     (ÏûëÏóÖ ÎÇ¥Ïö© Î¨∏ÏÑúÌôî)                        |"
    );
    console.log(
      "|  opus> /cycle-check     (ÏΩîÎìú ÌíàÏßà Í≤ÄÌÜ†)                          |"
    );
    console.log(
      "|                                                                |"
    );
  } else {
    console.log(
      "|                     üí° Usage                                   |"
    );
    console.log(
      "|                                                               |"
    );
    console.log(
      "|  In Claude Code:                                              |"
    );
    console.log(
      "|                                                               |"
    );
    console.log(
      "|  opus> /cycle-plan      (Plan your work)                      |"
    );
    console.log(
      "|  sonnet> /cycle-start   (Test-driven implementation)          |"
    );
    console.log(
      "|  sonnet> /cycle-log     (Document your work)                  |"
    );
    console.log(
      "|  opus> /cycle-check     (Quality review)                      |"
    );
    console.log(
      "|                                                               |"
    );
  }
  console.log(
    "+===============================================================+"
  );

  if (language === "ko") {
    console.log(
      "\n‚ú® OpusÍ∞Ä ÏßàÎ¨∏ÌïòÍ≥†, SonnetÏù¥ Íµ¨ÌòÑÌïòÎäî AI TDD ÏõåÌÅ¨ÌîåÎ°úÏö∞Î•º Í≤ΩÌóòÌï¥Î≥¥ÏÑ∏Ïöî!"
    );
    console.log("\nüìå Ï§ëÏöî: Claude Code ÏÑ∏ÏÖòÏùÑ 2Í∞ú Ïó¥Ïñ¥Ïïº Ìï©ÎãàÎã§:");
    console.log("   - ÏÑ∏ÏÖò 1: Opus Î™®Îìú (Í≥ÑÌöç/Î¶¨Î∑∞)");
    console.log("   - ÏÑ∏ÏÖò 2: Sonnet Î™®Îìú (Íµ¨ÌòÑ)");
    console.log(
      "\nüîÑ Ïû¨ÏãúÏûë: Claude CodeÎ•º Ïû¨ÏãúÏûëÌïòÎ©¥ Î™ÖÎ†πÏñ¥Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
    );
  } else {
    console.log(
      "\n‚ú® Experience AI TDD workflow with Opus asking and Sonnet implementing!"
    );
    console.log("\nüìå Important: You need to open 2 Claude Code sessions:");
    console.log("   - Session 1: Opus mode (planning/review)");
    console.log("   - Session 2: Sonnet mode (implementation)");
    console.log("\nüîÑ Restart: Restart Claude Code to use the commands.");
  }

  console.log(
    language === "ko"
      ? "\nüìö ÏûêÏÑ∏Ìïú ÏÇ¨Ïö©Î≤ï: https://github.com/keepitmello/Resonance--for-Claude-Code"
      : "\nüìö Documentation: https://github.com/keepitmello/Resonance--for-Claude-Code"
  );

  rl.close();
}

// Start installation
install().catch((err) => {
  console.error("Installation failed:", err);
  rl.close();
  process.exit(1);
});
